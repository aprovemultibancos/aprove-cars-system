Implemente passo a passo os seguintes recursos, corre√ß√µes e melhorias no projeto:

üîê 1. Configura√ß√£o e persist√™ncia da chave da API do Asaas
Objetivo: Garantir que o sistema mantenha a chave salva, reconhe√ßa o modo produ√ß√£o e a utilize corretamente em todas as chamadas.

Passos:

Criar tabela asaas_config com empresa_id, api_key, modo (sandbox ou producao)

Criar endpoints:

POST /api/asaas/config ‚Üí salva chave

GET /api/asaas/config ‚Üí retorna chave e modo

Quando usu√°rio salvar a chave, detectar se √© chave sandbox ou produ√ß√£o

Carregar automaticamente a chave ao abrir a aba ‚ÄúConfigura√ß√£o‚Äù

Usar essa chave em todas as requisi√ß√µes da classe AsaasAPI

üß† 2. Cadastro de clientes com CEP autom√°tico
Objetivo: Facilitar o preenchimento de endere√ßo no cadastro de cliente.

Passos:

Ao digitar 8 n√∫meros no campo CEP, chamar API:
https://viacep.com.br/ws/{cep}/json/

Preencher campos:

logradouro, bairro, cidade, estado

Permitir que o usu√°rio edite os campos manualmente ap√≥s preenchimento autom√°tico

üë• 3. Sincronizar e listar clientes reais do Asaas
Objetivo: Mostrar clientes existentes no Asaas e facilitar sele√ß√£o em cobran√ßas e vendas.

Passos:

Ao carregar a aba Clientes, chamar:
GET /api/v3/customers

Popular a listagem com os clientes reais

Criar bot√£o "Sincronizar Clientes" que salva todos os retornos no banco local

Usar esses dados em:

Nova cobran√ßa

Registrar venda

üí≥ 4. Criar cobran√ßa real no Asaas
Passos:

Selecionar cliente existente ou criar novo

Preencher os dados obrigat√≥rios: valor, data, descri√ß√£o

Enviar para o endpoint /v3/payments

Se for PIX ou Cart√£o, permitir gera√ß√£o do link

Armazenar ID da cobran√ßa no sistema local

üí∞ 5. Exibir taxas reais + comiss√£o da plataforma
Passos:

Mostrar valores reais do Asaas:

Cart√£o: 1.5%

Boleto: R$ 1,99

Pix: 0.99%

Adicionar comiss√£o do sistema: 1% sobre o valor

Exibir total da taxa final:

Cart√£o: 2.5%

Boleto: R$1.99 + 1%

Pix: 0.99% + 1%

üßæ 6. Registrar Venda com cliente do Asaas
Passos:

Campo "Cliente Registrado":

Buscar os clientes sincronizados do Asaas

Permitir campo manual como fallback

Campo "ID do pagamento Asaas":

Preenchido automaticamente se a venda gerar uma cobran√ßa

üîÑ 7. Split de Pagamento (comiss√£o do master)
Passos:

Criar configura√ß√£o de carteira master no backend (masterWalletId)

Ao criar link ou cobran√ßa, incluir:

ts
Copiar
Editar
split: [
  {
    walletId: "WALLET_ID_DO_MASTER",
    percentualValue: 1
  }
]
Registrar no banco a comiss√£o recebida para relat√≥rios

üì≤ 8. Integra√ß√£o WhatsApp Marketing com Conex√£o Web (N√ÉO Telein)
Problema atual: Tela exibe erro: "Invalid hook call". Al√©m disso, a conex√£o com o WhatsApp Web n√£o est√° estabelecendo.

‚úÖ Passos para resolver e integrar corretamente com o WhatsApp (usando WPPConnect):
A. Corrigir estrutura React
O erro "Invalid hook call" ocorre porque est√° chamando useState, useEffect ou outro hook fora de componente.

Corrigir isso movendo a chamada do hook para dentro de um componente funcional v√°lido.

B. Backend de conex√£o WhatsApp
Substituir Telein por WPPConnect (ou Baileys, Venom ou WhatsApp Cloud API, se preferir)

Criar servi√ßo local (Node.js com Express):

/connect: retorna QR Code

/status: verifica se est√° conectado

/send-message: envia texto

/send-media: envia m√≠dia

Usar Docker ou PM2 para manter conex√£o viva

Exibir QR Code no frontend para conectar o n√∫mero

Ao conectar, salvar session local

C. Frontend de envio
Aba WhatsApp:

Conex√µes: cadastrar nome, n√∫mero e limite

Contatos: CRUD completo

Templates: modelo de mensagem

Campanhas: enviar mensagens em massa por grupo, CSV ou sele√ß√£o

D. Envio com seguran√ßa
Adicionar:

Limite de mensagens por conex√£o/dia

Intervalo entre envios (configur√°vel)

Logs com falha ou sucesso por n√∫mero

