Objetivo: Validar se a estrutura atual do nosso sistema est√° adequada para suportar a opera√ß√£o multiempresa com split de pagamentos, integra√ß√£o real com a API Asaas, e envio em massa de mensagens via WhatsApp. Tamb√©m avaliar se a arquitetura est√° preparada para escalar e incorporar novas funcionalidades descritas.

üìå 1. Estrutura Multiempresa e Split de Pagamentos
Nosso sistema ser√° vendido como um CRM para outras lojas de ve√≠culos.

Cada loja ter√° sua pr√≥pria subconta, e precisamos lucrar por transa√ß√£o al√©m da mensalidade.

O split de pagamento est√° configurado para garantir 1% autom√°tico para a conta master (masterWalletId).

A Classe AsaasAPI deve suportar m√∫ltiplas chaves (uma por loja), e identificar a conta m√£e no momento do split.

‚úÖ Validar:

A estrutura da AsaasAPI permite m√∫ltiplas inst√¢ncias simult√¢neas com diferentes tokens?

A sincroniza√ß√£o de dados (clientes/pagamentos) est√° isolada por loja?

A implementa√ß√£o do split est√° funcionando corretamente para pagamentos gerados pelas subcontas?

üì© 2. Envio em Massa via WhatsApp (Telein)
Queremos uma funcionalidade integrada ao painel CRM que permita:

Conex√£o com API WhatsApp (Telein)

Cadastro e gest√£o de contatos (manualmente ou via CSV)

Cria√ß√£o de modelos de envio com textos, imagens, v√≠deos, PDF, √°udio

Regras de envio com seguran√ßa (intervalo, limite por chip, hor√°rio)

Campanhas com progresso, logs e exporta√ß√£o de relat√≥rios

‚úÖ Validar:

J√° existe endpoint pronto ou precisa de integra√ß√£o manual com a API da Telein?

Existe mapeamento para armazenar os contatos, modelos e logs no banco?

O sistema identifica se o WhatsApp est√° conectado para iniciar os envios?

üîÑ 3. Sincroniza√ß√£o Cliente (Vendas e Pagamentos)
O cliente selecionado em "Vendas" deve ser o mesmo que est√° em "Pagamentos".

O cliente vem diretamente do Asaas, e √© registrado automaticamente no banco local.

A cria√ß√£o de venda deve puxar esse cliente da base local sincronizada com o Asaas.

‚úÖ Validar:

Existe algum cache ou sincroniza√ß√£o automatizada entre os clientes Asaas e o sistema local?

A tela de venda est√° conectada ao banco de dados de clientes sincronizados?

Existe valida√ß√£o para n√£o duplicar cliente no banco caso ele j√° exista no Asaas?

üí≥ 4. M√≥dulos financeiros adicionais do Asaas
Queremos incluir no nosso sistema, al√©m de cobran√ßas:

Visualiza√ß√£o de extrato

Transfer√™ncia entre contas

Pagamento de contas

Registro e simula√ß√£o de antecipa√ß√µes

Antecipa√ß√£o autom√°tica

Negativa√ß√£o de inadimplentes (via Asaas ou parceiros)

‚úÖ Validar:

Os endpoints da Asaas necess√°rios para isso j√° est√£o mapeados na AsaasAPI?

A estrutura do banco permite armazenar extrato, transfer√™ncias e simula√ß√µes?

A conta Asaas contratada suporta os recursos de negativa√ß√£o e antecipa√ß√£o?

üîê 5. Revis√£o da arquitetura AsaasAPI atual
Conforme j√° implementado:

Classe AsaasAPI com abstra√ß√£o de todas opera√ß√µes

Autentica√ß√£o via access_token

Detec√ß√£o de ambiente (prod/sandbox)

Suporte a:

Cria√ß√£o de clientes

Pagamentos

Assinaturas

Cart√µes (tokeniza√ß√£o)

Links de pagamento

Split com 1% autom√°tico

Modo sandbox para testes

Controladores organizados por recurso

Sincroniza√ß√£o local ap√≥s cada opera√ß√£o

Valida√ß√µes robustas no front e backend

‚úÖ Validar:

Toda a comunica√ß√£o com a API est√° utilizando try/catch com logs apropriados?

O backend permite expans√£o f√°cil para novos endpoints como transfers, anticipations?

As estruturas de dados locais refletem fielmente o que vem da API Asaas (IDs, status, walletId etc.)?

